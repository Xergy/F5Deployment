"[concat('CLOUD_LIB_DIR=/config/cloud/azure/node_modules/@f5devcentral; 

mkdir -p $CLOUD_LIB_DIR && cp f5-cloud-libs*.tar.gz* /config/cloud;
 mkdir -p /var/log/cloud/azure;

function cp_logs() { cd /var/lib/waagent/custom-script/download && cp `ls -r | head -1`/std* /var/log/cloud/azure;
 };
 TMP_DIR=/mnt/creds;
  TMP_CREDENTIALS_FILE=$TMP_DIR/.passwd;
  BIG_IP_CREDENTIALS_FILE=/config/cloud/.passwd; 
  /usr/bin/install -b -m 755 /dev/null /config/verifyHash;
  /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh;
   /usr/bin/install -b -m 400 /dev/null $BIG_IP_CREDENTIALS_FILE;
    /usr/bin/install -b -m 400 /dev/null /config/cloud/.azCredentials;
   /usr/bin/install -b -m 755 /dev/null /config/cloud/managedRoutes;
    IFS=', variables('singleQuote'), '%', variables('singleQuote'), ';
    echo -e ', variables('verifyHash'), ' > /config/verifyHash;
     echo -e ', variables('installCloudLibs'), ' > /config/installCloudLibs.sh;
      echo -e ', variables('installCustomConfig'), ' >> /config/customConfig.sh;
       echo ', variables('singleQuote'), '{\"clientId\": \"', parameters('clientId'), '\", \"tenantId\": \"', parameters('tenantId'), '\", \"secret\": \"', parameters('servicePrincipalSecret'), '\", \"subscriptionId\": \"', variables('subscriptionID'), '\", \"storageAccount\": \"', variables('newDataStorageAccountName'), '\", \"storageKey\": \"', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('newDataStorageAccountName')), variables('storageApiVersion')).keys[0].value, '\", \"resourceGroupName\": \"', variables('resourceGroupName'), '\", \"uniqueLabel\": \"', variables('dnsLabel'), '\"}', variables('singleQuote'), ' > /config/cloud/.azCredentials;
        echo -e ', parameters('managedRoutes'), ' > /config/cloud/managedRoutes;
         unset IFS;
          bash /config/installCloudLibs.sh;
          source $CLOUD_LIB_DIR/f5-cloud-libs/scripts/util.sh; 
    
    create_temp_dir $TMP_DIR; 
    echo ', variables('singleQuote'), variables('adminPasswordOrKey'), variables('singleQuote'), '|sha512sum|cut -d \" \" -f 1|tr -d \"\n\" > $TMP_CREDENTIALS_FILE;

    bash $CLOUD_LIB_DIR/f5-cloud-libs/scripts/createUser.sh --user svc_user --password-file $TMP_CREDENTIALS_FILE;

    f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/encryptDataToFile.js --data-file $TMP_CREDENTIALS_FILE --out-file $BIG_IP_CREDENTIALS_FILE;
     wipe_temp_dir $TMP_DIR;', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].hashCmd, ';
        
    /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.azure.com'), ' --license ', parameters('licenseKey2'), ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --module ltm:nominal;

    /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', concat(take(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, add(lastIndexOf(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.'), 1)), add(int(take(split(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.')[3], indexOf(split(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.')[3], '/'))), 1)), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 ', variables('netCmd'), ' --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress1'), skip(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')), ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress1'), skip(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')), ',vlan:internal --log-level info;

    echo \"/usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs-azure/scripts/failoverProvider.js\" >> /config/failover/tgactive;

    echo \"/usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs-azure/scripts/failoverProvider.js\" >> /config/failover/tgrefresh;

    tmsh modify cm device ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.azure.com'), ' unicast-address { { ip ', variables('intSubnetPrivateAddress1'), ' port 1026 } } mirror-ip ', variables('intSubnetPrivateAddress1'), ';
     ', variables('failoverCmdArray')[parameters('bigIpVersion')], ';

     /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress1'), ' --join-group --device-group Sync --sync --remote-host ', variables('mgmtSubnetPrivateAddress'), ' --remote-user svc_user --remote-password-url file:///config/cloud/.passwd', ';

    if [[ $? == 0 ]];
     then tmsh load sys application template f5.service_discovery.tmpl;
     
    tmsh load sys application template f5.cloud_logger.v1.0.0.tmpl;
     base=', variables('extSubnetPrivateAddressPrefix'), variables('extSubnetPrivateAddressSuffixInt'), ';
      f3=$(echo $base | cut -d. -f1-3);
     last=$(echo $base | cut -d. -f4);
      for i in $(seq 1 ', variables('numberOfExternalIps'), ');

    do addr=${f3}.${last};
     last=$((last+1));
     tmsh create ltm virtual-address $addr address $addr;
     done;
     ', variables('routeCmdArray')[parameters('bigIpVersion')], '; 
    $(nohup bash /config/failover/tgactive &>/dev/null &);
     bash /config/customConfig.sh;
     $(cp_logs);
     else $(cp_logs);
     exit 1;
     fi', ';
    if grep -i \"PUT failed\" /var/log/waagent.log -q;
     then echo \"Killing waagent exthandler, daemon should restart it\";
      pkill -f \"python -u /usr/sbin/waagent -run-exthandlers\";
       fi')]"